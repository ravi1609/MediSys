public class MediShowUserAccessLogDao
{
// logger initialization
	
	
		private static final Logger logger = Logger.getLogger(MediShowUserAccessLogDao.class);
		
		
		// fields
		
		private static Session session;
		private static Transaction tr;
		
		
		
		// methods 
		/*
		public static Integer getMaxTableId(){
			Integer a=0;
			try{
				
				if (session == null || session.isOpen() == false) 
		  		{
		  			session = HibernateSessionFactoryProvider.getSessionFactory().openSession();
		  		}
		  		session.getTransaction().begin();
				
				Criteria criteria=session.createCriteria(AddPaymentModeMasterPojo .class);
				ProjectionList prj=Projections.projectionList();
				prj.add(Projections.max("PAYMENT_MODE_ID"));
				criteria.setProjection(prj);			
		  		List max=criteria.list();
		  		
		  		if(max!=null && max.size()>0){
					a=(Integer)max.get(0);
					}
					if(a==null)
						a=0;
					
			}catch(Exception e){
				logger.error("Error in fetching the max id ..."+e.getMessage());
			}
			finally{
				try{
				
					session.close();
					logger.info("session closed..");
				}catch(Exception e){
					logger.error(e.getMessage());
				}
			}
			return a;
			
		}
		
		*/
		// getting the state list for display
		
		
		public static List<MediShowUserAccessLogBean> getDataForDisplay(){
			List<MediShowUserAccessLogBean> displist=null;
			
			try{
				displist= new ArrayList<MediShowUserAccessLogBean>();
				if (session == null || session.isOpen() == false) 
		  		{
		  			session = HibernateSessionFactoryProvider.getSessionFactory().openSession();
		  		}
		  		session.getTransaction().begin();
				
				Criteria criteria=session.createCriteria(AddPaymentModeMasterPojo.class);/// add the pojo name here 
				String created_by=(String)ServletActionContext.getContext().getSession().get("loginname");
				
				criteria.addOrder(Order.asc("PAYMENT_MODE_ID"));
				List<AddPaymentModeMasterPojo> add_payment_mode_names_list=(List<AddPaymentModeMasterPojo>)criteria.list();
			    Iterator<MediUserReportsMasterPojo>	iterator=add_payment_mode_names_list.iterator();
				while(iterator.hasNext()){			
					AddPaymentModeMasterPojo add_payment_mode_pojo= new AddPaymentModeMasterPojo();
					add_payment_mode_pojo=(MediUserReportsMasterPojo)iterator.next();
					MediAddPaymentModeBean dbean= new MediAddPaymentModeBean();
					
          /*
          this part has to be updated during the commiting changes into master branch
          
					dbean.setCreated_by(add_payment_mode_pojo.getCREATED_BY());
					dbean.setCreated_date(add_payment_mode_pojo.getCREATED_DATE());
					dbean.setReport_desc(add_payment_mode_pojo.getREPORT_DESCRIPTION());
					dbean.setReport_id(add_payment_mode_pojo.getREPORT_ID());
					dbean.setReport_name(add_payment_mode_pojo.getREPORT_NAME());
					dbean.setReport_type_id(add_payment_mode_pojo.getREPORT_TYPE());
					dbean.setReport_xml_name(add_payment_mode_pojo.getREPORT_XML_NAME());
					
					*/
					
					dbean.setRcrd_status(add_user_reports_pojo.getRECORD_STATUS());
					if(add_user_reports_pojo.getRECORD_STATUS().equals(0))
					    dbean.setStatus("ENABLE");
						else
						dbean.setStatus("DISABLE");
					
					displist.add(dbean);
				}
				
			}catch(Exception e){
				
				logger.error("error in fetching the display list"+e.getMessage());
				
			}
			finally{
				try{ 
				
					session.close();
					logger.info("session closed..");
				}catch(Exception e){
					logger.error(e.getMessage());
				}
			}
			
			
			return displist;
		}
		
		
		
		
		
		/*
		
		public static String addOrUpdatePaymentModes(MediShowUserAccessLogBean show_user_access_bean){
			 String update_msg = null;
				
				try{
						
						
						if (session == null || session.isOpen() == false) 
						{
						
									session = HibernateSessionFactoryProvider.getSessionFactory().openSession();
							}
							
							String created_by=(String)ServletActionContext.getContext().getSession().get("loginname");
							if(created_by==null){
								
								created_by="ADMIN";
								
							}
							//session.getTransaction().begin();
							 
						Criteria	criteria = session.createCriteria(AddPaymentModeMasterPojo.class);
						
							if(add_user_report_bean.getUflag().equals(0)){
								//save
								session.getTransaction().begin();
								logger.info("transaction started saving data..");
							
								AddPaymentModeMasterPojo add_payment_mode_pojo= new AddPaymentModeMasterPojo();
								
								
								
								/*
								add_payment_mode_bean
								
								add_payment_mode_pojo.setCREATED_BY(created_by);
								add_payment_mode_pojo.setCREATED_DATE(new Date());
								add_payment_mode_pojo.setCREATED_ON(IpAddress.getIp());
								add_payment_mode_pojo.setCREATED_TIME(new Date());
								add_payment_mode_pojo.setRECORD_STATUS(add_payment_mode_bean.getRcrd_status());
								add_payment_mode_pojo.setREPORT_DESCRIPTION(add_payment_mode_bean.getReport_desc());
								add_payment_mode_pojo.setREPORT_ID(add_payment_mode_bean.getReport_id());
								add_payment_mode_pojo.setREPORT_NAME(add_payment_mode_bean.getReport_name());
								add_payment_mode_pojo.setREPORT_TYPE(add_payment_mode_bean.getReport_type_id());
								add_payment_mode_pojo.setREPORT_XML_NAME(add_payment_mode_bean.getReport_xml_name());
								
								this part has to be updated when commiting to the master repo
								
								*/ 
						 
								session.save(add_user_report_pojo);
								session.getTransaction().commit();
								update_msg="saved";
								logger.info("transaction commited...data saved successfully..");
								
							}
							
							
							
							
							
							
							
							if (add_payment_mode_bean.getUflag().equals(1)){
								//update
			                        	session.getTransaction().begin();
						    logger.info("transaction started updating data..");
			               	
					/*
					this part has to be updated when commiting directly to the master repo
					
			               	criteria.add(Restrictions.eq("PAYMENT_MODE_ID",add_payment_mode_bean.getPayment_mode_id()));
			               	
			               	AddPaymentModeMasterPojo add_payment_mode_pojo= new AddPaymentModeMasterPojo();
			               	
			               	add_payment_mode_pojo= (AddPaymentModeMasterPojo)criteria.uniqueResult();
			               	
			                        	add_payment_mode_pojo.setCREATED_BY(created_by);
							add_payment_mode_pojo.setCREATED_DATE(new Date());
							add_payment_mode_pojo.setCREATED_ON(IpAddress.getIp());
							add_payment_mode_pojo.setCREATED_TIME(new Date());
							add_payment_mode_pojo.setRECORD_STATUS(add_payment_mode_bean.getRcrd_status());
							add_payment_mode_pojo.setREPORT_DESCRIPTION(add_payment_mode_bean.getReport_desc());
						
							add_payment_mode_pojo.setREPORT_NAME(add_payment_mode_bean.getReport_name());
							add_payment_mode_pojo.setREPORT_TYPE(add_payment_mode_bean.getReport_type_id());
							add_payment_mode_pojo.setREPORT_XML_NAME(add_payment_mode_bean.getReport_xml_name());
						


			               	*/
							 
			   		    
			   		    session.update(add_payment_mode_pojo);
			   		    session.getTransaction().commit();
			   		    update_msg="updated";
							logger.info("transaction commited...data updation successfull..");
			               }
							
			           /*    if(state_bean.getOption_list().equals(2)){
								//delete
			               	  session.getTransaction().begin();
								logger.info("transaction started deleting data..");
								MediStateMasterPojo state_pojo=	(MediStateMasterPojo)session.get(MediStateMasterPojo.class, state_bean.getSrno());
								
								state_pojo.setDELETE_FLAG(1);
								
								 session.update(state_pojo);
								 session.getTransaction().commit();
								 update_msg="deleted";
								 logger.info("transaction commited...data deletion successfull..");
							}*/
							
							
					}catch(Exception e)
					{
						session.getTransaction().rollback();
						logger.error("error:-"+e.getMessage());
						update_msg="error";
						}
					finally{
						try{
						
							session.close();
							logger.info("session closed..");
						}catch(Exception e){
							update_msg="error";
							logger.error(e.getMessage());
						}
					}
					
					
				
				return update_msg;
				
				
				
		}
		*/

}
